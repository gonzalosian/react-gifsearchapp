{"version":3,"sources":["components/AddCategory.js","helpers/getGifs.js","components/GifGridItem.js","components/GifGrid.js","hooks/useFetchGifs.js","GifExpertApp.js","index.js"],"names":["AddCategory","setCategories","useState","inputValue","setInputValue","onSubmit","e","preventDefault","trim","length","cats","type","value","onChange","target","getGifs","category","a","url","encodeURI","fetch","respuesta","json","data","gifs","map","img","id","title","images","downsized_medium","GifGridItem","className","src","alt","GifGrid","loading","state","setState","useEffect","then","imgs","useFetchGifs","key","GifExpertApp","props","categories","ReactDOM","render","document","getElementById"],"mappings":"mNAwCeA,EApCK,SAAC,GAAuB,IAArBC,EAAoB,EAApBA,cAAoB,EAEHC,mBAAS,IAFN,mBAEhCC,EAFgC,KAEpBC,EAFoB,KAmBvC,OACI,0BAAMC,SAXW,SAACC,GAClBA,EAAEC,iBAGEJ,EAAWK,OAAOC,OAAO,IACzBR,GAAe,SAAAS,GAAI,OAAMP,GAAN,mBAAqBO,OACxCN,EAAc,OAMd,6CAAmBD,EAAnB,KACA,2BACIQ,KAAK,OACLC,MAAOT,EAEPU,SAtBc,SAACP,GAEvBF,EAAcE,EAAEQ,OAAOF,Y,uBCTlBG,EAAO,uCAAG,WAAMC,GAAN,uBAAAC,EAAA,6DAEbC,EAFa,iDAEmCC,UAAUH,GAF7C,+DAIKI,MAAMF,GAJX,cAIbG,EAJa,gBAKEA,EAAUC,OALZ,uBAKZC,EALY,EAKZA,KAGDC,EAAOD,EAAKE,KAAK,SAAAC,GAAQ,IAAD,EAC1B,MAAO,CACHC,GAAID,EAAIC,GACRC,MAAOF,EAAIE,MACXV,IAAG,UAAEQ,EAAIG,cAAN,aAAE,EAAYC,iBAAiBZ,QAZvB,kBAoBZM,GApBY,4CAAH,sDCCPO,EAAc,SAAC,GAAoB,IAAlBH,EAAiB,EAAjBA,MAAOV,EAAU,EAAVA,IAIjC,OACI,yBAAKc,UAAU,QACX,yBAAKC,IAAKf,EAAKc,UAAU,eAAeE,IAAKN,IAC7C,yBAAKI,UAAU,aACX,wBAAIA,UAAU,cAAcJ,MCL/BO,EAAU,SAAC,GAAkB,IAAhBnB,EAAe,EAAfA,SAAe,ECFb,SAACA,GAAa,MAGZd,mBAAS,CAC/BqB,KAAK,GACLa,SAAS,IALyB,mBAG/BC,EAH+B,KAGxBC,EAHwB,KAkCtC,OAzBAC,qBAAW,WAEPxB,EAAQC,GAEHwB,MAAM,SAAAC,GAKCH,EAAS,CACLf,KAAMkB,EACNL,SAAS,SAK1B,CAACpB,IASGqB,ED5BwBK,CAAa1B,GAAhCa,EAJyB,EAI9BN,KAAaa,EAJiB,EAIjBA,QAapB,OACI,oCACI,wBAAIJ,UAAU,uDAAd,IAAuEhB,EAAvE,KAGEoB,GAAW,uBAAGJ,UAAU,oCAAb,WAGb,yBAAKA,UAAU,gBAEHH,EAAOJ,KAAK,SAAAC,GAAG,OACX,kBAAC,EAAD,eACIiB,IAAKjB,EAAIC,IACLD,UEcrBkB,EA7CM,SAAAC,GAAU,IAAD,EAEU3C,mBAAS,CAAC,KAFpB,mBAEnB4C,EAFmB,KAEP7C,EAFO,KAe1B,OACI,oCACI,8CACA,kBAAC,EAAD,CAAaA,cAAeA,IAC5B,6BAIA,4BAMQ6C,EAAWrB,KAAK,SAAAT,GAAQ,OACpB,kBAAC,EAAD,CACI2B,IAAM3B,EACNA,SAAWA,UC9BvC+B,IAASC,OACL,kBAAC,EAAD,MACFC,SAASC,eAAe,U","file":"static/js/main.8e4d8c3c.chunk.js","sourcesContent":["import React, {useState} from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\n// Desestructuramos los argumentos del componente y recibimos el setCategories\r\nconst AddCategory = ( {setCategories} ) => {\r\n\r\n    const [inputValue, setInputValue] = useState('');\r\n\r\n    const handleInputChange = (e) => {\r\n        // console.log( e.target.value );\r\n        setInputValue(e.target.value);\r\n    }\r\n\r\n    const handleSubmit = (e) => {\r\n        e.preventDefault();\r\n        // console.log('Submit hecho');\r\n\r\n        if (inputValue.trim().length>2){\r\n            setCategories( cats => [ inputValue, ...cats ] )\r\n            setInputValue('');\r\n        }\r\n    }\r\n\r\n    return (\r\n        <form onSubmit={ handleSubmit } >\r\n            <h2>Add Category: {inputValue} </h2>\r\n            <input \r\n                type=\"text\"\r\n                value={inputValue}\r\n                // onChange={ (e) => console.log(e) }\r\n                onChange={handleInputChange}\r\n            ></input>\r\n        </form>\r\n    )\r\n}\r\n\r\nAddCategory.propTypes = {\r\n    setCategories: PropTypes.func.isRequired\r\n}\r\n\r\nexport default AddCategory\r\n","\r\nexport const getGifs = async(category) => {\r\n    // const url = \"https://api.giphy.com/v1/gifs/search?q=Morty&api_key=hdZmH7PHvEPq3qrRVUMEdV3jlGVw0dy2\";\r\n    const url = `https://api.giphy.com/v1/gifs/search?q=${encodeURI(category)}&limit=10&api_key=hdZmH7PHvEPq3qrRVUMEdV3jlGVw0dy2`;\r\n    \r\n    const respuesta = await fetch(url);\r\n    const {data} = await respuesta.json();\r\n    // console.log(data);\r\n\r\n    const gifs = data.map( img => {\r\n        return {\r\n            id: img.id,\r\n            title: img.title,\r\n            url: img.images?.downsized_medium.url\r\n        }\r\n    } );\r\n\r\n    // console.log(gifs);\r\n\r\n    // setImages(gifs);\r\n\r\n    return gifs;\r\n}","import React from 'react'\r\n\r\nexport const GifGridItem = ( {title, url} ) => {\r\n\r\n    // console.log({id, title, url});\r\n\r\n    return (\r\n        <div className=\"card\">\r\n            <img src={url} className=\"card-img-top\" alt={title}></img>\r\n            <div className=\"card-body\">\r\n                <h5 className=\"card-title\">{title}</h5>\r\n            </div>\r\n        </div>\r\n    )\r\n\r\n    // return (\r\n    //     <div className=\"card animate__animated animate__bounce animate__delay-2s\" >\r\n    //         <img src={url} alt={title} ></img>\r\n    //         <p>{title}</p>\r\n    //     </div>\r\n    // )\r\n}","import React from 'react';\r\nimport { useFetchGifs } from '../hooks/useFetchGifs';\r\nimport { GifGridItem } from './GifGridItem';\r\n// import { getGifs } from '../helpers/getGifs';\r\n\r\nexport const GifGrid = ({ category }) => {\r\n\r\n    // const [images, setImages] = useState([]);\r\n    // Acá usamos nuestro Custom Hooks que se puede reutilizar.\r\n    const {data:images, loading} = useFetchGifs(category);\r\n    \r\n    // El arreglo vacío significa que este código así como está, solo quiero que se ejecute la instrucción \r\n    // getGifs() cuando el componente es renderizado por primera vez.\r\n\r\n    // useEffect( () => {\r\n    //     getGifs( category )\r\n    //         .then( imgs => setImages( imgs ) );\r\n    // }, [category])\r\n\r\n    // Esta \"getGifs\" funcion hace la peticion http, trae las imagenes, las procesa y podria retornarlas.\r\n    // Quizás no es necesario que esté en nuestro componenete.\r\n    \r\n    return (\r\n        <>\r\n            <h3 className=\"animate__animated animate__bounce animate__delay-2s\" > {category} </h3>\r\n\r\n            {/* { loading ? 'Cargando...' : 'Data cargada' } */}\r\n            { loading && <p className=\"animate__animated animate__flash\" >Loading</p> }\r\n\r\n            {/* <div className=\"card-grid\" > */}\r\n            <div className=\"card-columns\">\r\n                    {\r\n                        images.map( img => (\r\n                            <GifGridItem\r\n                                key={img.id}\r\n                                {...img}\r\n                            ></GifGridItem>\r\n                        ) )\r\n                    }\r\n            </div>\r\n        </>\r\n    )\r\n}\r\n","import { useState, useEffect } from \"react\"\r\nimport { getGifs } from \"../helpers/getGifs\";\r\n\r\nexport const useFetchGifs = (category) => {\r\n\r\n    // Cuando usemos por primera vez a \"useFetchGifs\", va a cargar un estado por defecto.\r\n    const [state, setState] = useState({\r\n        data:[],\r\n        loading: true\r\n    });\r\n\r\n    // Se hace el efecto para que solo se dispare cuando cambia la categoria.\r\n    useEffect( () => {\r\n        // Hace la petición http.\r\n        getGifs(category)\r\n            // Obtenermos las imagenes.\r\n            .then( imgs => {\r\n\r\n                // setTimeout(() => {\r\n                    // Cuando tenemos la data llamamos al setState cambiando la imformacion para el loading\r\n                    // para el disparo de la renderización del componente.\r\n                    setState({\r\n                        data: imgs,\r\n                        loading: false\r\n                    })\r\n                // }, 3000);\r\n                \r\n            } )\r\n    }, [category])\r\n\r\n    // setTimeout(() => {\r\n    //     setState({\r\n    //         data:[1,2,3,4,5,6,7,8,9],\r\n    //         loading: false\r\n    //     })\r\n    // }, 3000);\r\n\r\n    return state; // {data:[], loading: true}\r\n}","import React, {useState} from 'react'\r\nimport AddCategory from './components/AddCategory';\r\nimport { GifGrid } from './components/GifGrid';\r\n\r\nconst GifExpertApp = props => {\r\n\r\n    const [categories, setCategories] = useState(['']);\r\n\r\n    // const handleAdd = () => {\r\n    //     console.log(categories);\r\n    //     // setCategories([...categories, 'Goku']);\r\n    //     setCategories( cats => [...cats, 'Goku'] )\r\n    //     // se puede hacer de las dos formas.\r\n    // }\r\n// NOTA: Si presionamos mas de una vez, dará un warning, pero al trabajar con una DB,\r\n// la key será unica y no dará ese error.\r\n\r\n    //console.log(categories);\r\n\r\n    return (\r\n        <>\r\n            <h2>Gif Search App</h2>\r\n            <AddCategory setCategories={setCategories} ></AddCategory>\r\n            <hr></hr>\r\n\r\n            {/* <button onClick={ handleAdd }>Agregar</button> */}\r\n\r\n            <ol  >\r\n                {\r\n                    // categories.map( category => {\r\n                    //     return <li key={category} > {category} </li>\r\n                    // } )\r\n\r\n                    categories.map( category => (\r\n                        <GifGrid\r\n                            key={ category }\r\n                            category={ category }\r\n                        ></GifGrid>\r\n                    ) )\r\n                }\r\n            </ol>\r\n        </>\r\n    )\r\n}\r\n\r\nGifExpertApp.propTypes = {\r\n\r\n}\r\n\r\nexport default GifExpertApp","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport './index.css';\nimport GifExpertApp from './GifExpertApp';\n\nReactDOM.render(\n    <GifExpertApp />,\n  document.getElementById('root')\n);"],"sourceRoot":""}